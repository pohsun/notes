/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => IncludeFilePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// util.ts
function resolvePath(targetPath, sourcePath) {
  targetPath = targetPath.replace("\\", "/");
  if (targetPath.startsWith("/")) {
    throw Error(`"${targetPath}" should not start with "/". Use "@/" to reference a file relative to the vault root.`);
  }
  if (targetPath.startsWith("@/")) {
    return targetPath.substring(2);
  }
  if (!sourcePath) {
    throw Error(`Cannot resolve relative path "${targetPath}" because the source path is missing.`);
  }
  const parts = sourcePath.split("/");
  parts.pop();
  for (const part of targetPath.split("/")) {
    if (part == "..") {
      if (parts.pop() == void 0) {
        throw Error(`"${targetPath}" could not be resolved. Did you use too many ".."?`);
      }
    } else if (part == "." || !part) {
    } else {
      parts.push(part);
    }
  }
  return parts.join("/");
}

// main.ts
var IncludeFilePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("include", async (source, el, ctx) => {
      var _a, _b;
      let markdown;
      let include_path;
      try {
        const sectionInfo = ctx.getSectionInfo(el);
        if (sectionInfo == null) {
          throw Error("Could not retrieve section information.");
        }
        include_path = (0, import_obsidian.normalizePath)(resolvePath((0, import_obsidian.normalizePath)(source.trim()), ctx.sourcePath));
        const include_file = this.app.vault.getAbstractFileByPath(include_path);
        if (include_file == null) {
          throw Error(`"${source}" could not be found.`);
        } else if (include_file instanceof import_obsidian.TFolder) {
          throw Error(`"${source}" is a folder.`);
        } else if (!(include_file instanceof import_obsidian.TFile)) {
          throw Error(`"${source}" is not a file.`);
        }
        const content = await this.app.vault.read(include_file);
        const startLine = sectionInfo.text.split(/\n/)[sectionInfo.lineStart];
        const lang = (_b = (_a = startLine.match(/include(?:[:\s]+(?<lang>\w+))?/)) == null ? void 0 : _a.groups) == null ? void 0 : _b.lang;
        markdown = ["```", lang, "\n", content.trim(), "\n```"].join("");
      } catch (error) {
        let message;
        if (error instanceof Error) {
          message = error.message;
        } else {
          message = String(error);
        }
        markdown = `> [!error] ${message}`;
        include_path = "unresolved";
      }
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.View);
      if (view == null) {
        el.createSpan({ text: "There is no active view for rendering markdown." });
      } else {
        await import_obsidian.MarkdownRenderer.renderMarkdown(markdown, el, include_path, view);
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ1dGlsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW4sIFRGaWxlLCBURm9sZGVyLCBWaWV3LCBub3JtYWxpemVQYXRoIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcmVzb2x2ZVBhdGggfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluY2x1ZGVGaWxlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcImluY2x1ZGVcIiwgYXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuXHRcdFx0bGV0IG1hcmtkb3duOiBzdHJpbmc7XG5cdFx0XHRsZXQgaW5jbHVkZV9wYXRoOiBzdHJpbmc7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBHZXQgdGhlIHNlY3Rpb24gaW5mb3JtYXRpb24uXG5cdFx0XHRcdGNvbnN0IHNlY3Rpb25JbmZvID0gY3R4LmdldFNlY3Rpb25JbmZvKGVsKTtcblx0XHRcdFx0aWYgKHNlY3Rpb25JbmZvID09IG51bGwpIHtcblx0XHRcdFx0XHR0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCByZXRyaWV2ZSBzZWN0aW9uIGluZm9ybWF0aW9uLlwiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgdGhlIGZpbGUgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG5cdFx0XHRcdGluY2x1ZGVfcGF0aCA9IG5vcm1hbGl6ZVBhdGgocmVzb2x2ZVBhdGgobm9ybWFsaXplUGF0aChzb3VyY2UudHJpbSgpKSwgY3R4LnNvdXJjZVBhdGgpKTtcblxuXHRcdFx0XHQvLyBMb2FkIHRoZSBjb250ZW50LlxuXHRcdFx0XHRjb25zdCBpbmNsdWRlX2ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoaW5jbHVkZV9wYXRoKTtcblx0XHRcdFx0aWYgKGluY2x1ZGVfZmlsZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhyb3cgRXJyb3IoYFwiJHtzb3VyY2V9XCIgY291bGQgbm90IGJlIGZvdW5kLmApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGluY2x1ZGVfZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcblx0XHRcdFx0XHR0aHJvdyBFcnJvcihgXCIke3NvdXJjZX1cIiBpcyBhIGZvbGRlci5gKTtcblx0XHRcdFx0fSBlbHNlIGlmICghKGluY2x1ZGVfZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuXHRcdFx0XHRcdHRocm93IEVycm9yKGBcIiR7c291cmNlfVwiIGlzIG5vdCBhIGZpbGUuYCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoaW5jbHVkZV9maWxlKTtcblxuXHRcdFx0XHQvLyBEZXRlcm1pbmUgdGhlIGxhbmd1YWdlIGlmIGFueS5cblx0XHRcdFx0Y29uc3Qgc3RhcnRMaW5lID0gc2VjdGlvbkluZm8udGV4dC5zcGxpdCgvXFxuLylbc2VjdGlvbkluZm8ubGluZVN0YXJ0XTtcblx0XHRcdFx0Y29uc3QgbGFuZyA9IHN0YXJ0TGluZS5tYXRjaCgvaW5jbHVkZSg/Ols6XFxzXSsoPzxsYW5nPlxcdyspKT8vKT8uZ3JvdXBzPy5sYW5nO1xuXG5cdFx0XHRcdC8vIFByZXBhcmUgdGhlIG1hcmtkb3duIGNvbnRlbnQuXG5cdFx0XHRcdG1hcmtkb3duID0gW1wiYGBgXCIsIGxhbmcsIFwiXFxuXCIsIGNvbnRlbnQudHJpbSgpLCBcIlxcbmBgYFwiXS5qb2luKFwiXCIpO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gU2hvdyBhbiBlcnJvciBtZXNzYWdlLlxuXHRcdFx0XHRsZXQgbWVzc2FnZTogc3RyaW5nO1xuXHRcdFx0XHRpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0XHRcdG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1lc3NhZ2UgPSBTdHJpbmcoZXJyb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hcmtkb3duID0gYD4gWyFlcnJvcl0gJHttZXNzYWdlfWA7XG5cdFx0XHRcdGluY2x1ZGVfcGF0aCA9IFwidW5yZXNvbHZlZFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW5kZXIgdGhlIGNvbnRlbnQgb3IgYWJvcnQgd2l0aCBhIHNpbXBsZSBlcnJvciBtZXNzYWdlIGlmIHRoZXJlIGlzIG5vIGFjdGl2ZSB2aWV3LlxuXHRcdFx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKFZpZXcpO1xuXHRcdFx0aWYgKHZpZXcgPT0gbnVsbCkge1xuXHRcdFx0XHRlbC5jcmVhdGVTcGFuKHt0ZXh0OiBcIlRoZXJlIGlzIG5vIGFjdGl2ZSB2aWV3IGZvciByZW5kZXJpbmcgbWFya2Rvd24uXCJ9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24obWFya2Rvd24sIGVsLCBpbmNsdWRlX3BhdGgsIHZpZXcpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0b251bmxvYWQoKSB7IH1cbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhdGgodGFyZ2V0UGF0aDogc3RyaW5nLCBzb3VyY2VQYXRoPzogc3RyaW5nKTogc3RyaW5nIHtcblx0Ly8gVXNlIGZvcndhcmQgc2xhc2ggZm9yIHBhdGhzIG9uIGFsbCBwbGF0Zm9ybXMuXG5cdHRhcmdldFBhdGggPSB0YXJnZXRQYXRoLnJlcGxhY2UoXCJcXFxcXCIsIFwiL1wiKTtcbiAgICAvLyBUaGlzIGlzIGFuIGFic29sdXRlIHBhdGggaW4gdGhlIGZpbGUgc3lzdGVtLiBDb21wbGFpbiBhYm91dCBpdC5cbiAgICBpZiAodGFyZ2V0UGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihgXCIke3RhcmdldFBhdGh9XCIgc2hvdWxkIG5vdCBzdGFydCB3aXRoIFwiL1wiLiBVc2UgXCJAL1wiIHRvIHJlZmVyZW5jZSBhIGZpbGUgcmVsYXRpdmUgdG8gdGhlIHZhdWx0IHJvb3QuYCk7XG4gICAgfVxuXHQvLyBUaGlzIGlzIGFuIGFic29sdXRlIHBhdGg7IHJldHVybiBpdCBhcyBpcyBhZnRlciBwb3BwaW5nIHRoZSBsZWFkaW5nIGNoYXJhY3RlcnMuXG5cdGlmICh0YXJnZXRQYXRoLnN0YXJ0c1dpdGgoXCJAL1wiKSkge1xuXHRcdHJldHVybiB0YXJnZXRQYXRoLnN1YnN0cmluZygyKTtcblx0fVxuXHQvLyBSZXNvbHZlIHRoZSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgZG9jdW1lbnQgYWZ0ZXIgY2hlY2tpbmcgd2UgaGF2ZSBvbmUuXG4gICAgaWYgKCFzb3VyY2VQYXRoKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBDYW5ub3QgcmVzb2x2ZSByZWxhdGl2ZSBwYXRoIFwiJHt0YXJnZXRQYXRofVwiIGJlY2F1c2UgdGhlIHNvdXJjZSBwYXRoIGlzIG1pc3NpbmcuYCk7XG4gICAgfVxuXHRjb25zdCBwYXJ0cyA9IHNvdXJjZVBhdGguc3BsaXQoXCIvXCIpO1xuXHQvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlbmFtZSB0byBnZXQgdGhlIHBhcmVudCBkaXJlY3RvcnkuXG5cdHBhcnRzLnBvcCgpO1xuXHRmb3IgKGNvbnN0IHBhcnQgb2YgdGFyZ2V0UGF0aC5zcGxpdChcIi9cIikpIHtcblx0XHRpZiAocGFydCA9PSBcIi4uXCIpIHtcblx0XHRcdGlmIChwYXJ0cy5wb3AoKSA9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoYFwiJHt0YXJnZXRQYXRofVwiIGNvdWxkIG5vdCBiZSByZXNvbHZlZC4gRGlkIHlvdSB1c2UgdG9vIG1hbnkgXCIuLlwiP2ApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAocGFydCA9PSBcIi5cIiB8fCAhcGFydCkge1xuXHRcdFx0Ly8gRG8gbm90aGluZy5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFydHMucHVzaChwYXJ0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHBhcnRzLmpvaW4oXCIvXCIpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE4RTs7O0FDQXZFLFNBQVMsWUFBWSxZQUFvQixZQUE2QjtBQUU1RSxlQUFhLFdBQVcsUUFBUSxNQUFNLEdBQUc7QUFFdEMsTUFBSSxXQUFXLFdBQVcsR0FBRyxHQUFHO0FBQzVCLFVBQU0sTUFBTSxJQUFJLGlHQUFpRztBQUFBLEVBQ3JIO0FBRUgsTUFBSSxXQUFXLFdBQVcsSUFBSSxHQUFHO0FBQ2hDLFdBQU8sV0FBVyxVQUFVLENBQUM7QUFBQSxFQUM5QjtBQUVHLE1BQUksQ0FBQyxZQUFZO0FBQ2IsVUFBTSxNQUFNLGlDQUFpQyxpREFBaUQ7QUFBQSxFQUNsRztBQUNILFFBQU0sUUFBUSxXQUFXLE1BQU0sR0FBRztBQUVsQyxRQUFNLElBQUk7QUFDVixhQUFXLFFBQVEsV0FBVyxNQUFNLEdBQUcsR0FBRztBQUN6QyxRQUFJLFFBQVEsTUFBTTtBQUNqQixVQUFJLE1BQU0sSUFBSSxLQUFLLFFBQVc7QUFDN0IsY0FBTSxNQUFNLElBQUksK0RBQStEO0FBQUEsTUFDaEY7QUFBQSxJQUNELFdBQVcsUUFBUSxPQUFPLENBQUMsTUFBTTtBQUFBLElBRWpDLE9BQU87QUFDTixZQUFNLEtBQUssSUFBSTtBQUFBLElBQ2hCO0FBQUEsRUFDRDtBQUNBLFNBQU8sTUFBTSxLQUFLLEdBQUc7QUFDdEI7OztBRDFCQSxJQUFxQixvQkFBckIsY0FBK0MsdUJBQU87QUFBQSxFQUNyRCxNQUFNLFNBQVM7QUFDZCxTQUFLLG1DQUFtQyxXQUFXLE9BQU8sUUFBUSxJQUFJLFFBQVE7QUFOaEY7QUFPRyxVQUFJO0FBQ0osVUFBSTtBQUNKLFVBQUk7QUFFSCxjQUFNLGNBQWMsSUFBSSxlQUFlLEVBQUU7QUFDekMsWUFBSSxlQUFlLE1BQU07QUFDeEIsZ0JBQU0sTUFBTSx5Q0FBeUM7QUFBQSxRQUN0RDtBQUdBLDJCQUFlLCtCQUFjLGdCQUFZLCtCQUFjLE9BQU8sS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUM7QUFHdEYsY0FBTSxlQUFlLEtBQUssSUFBSSxNQUFNLHNCQUFzQixZQUFZO0FBQ3RFLFlBQUksZ0JBQWdCLE1BQU07QUFDekIsZ0JBQU0sTUFBTSxJQUFJLDZCQUE2QjtBQUFBLFFBQzlDLFdBQVcsd0JBQXdCLHlCQUFTO0FBQzNDLGdCQUFNLE1BQU0sSUFBSSxzQkFBc0I7QUFBQSxRQUN2QyxXQUFXLEVBQUUsd0JBQXdCLHdCQUFRO0FBQzVDLGdCQUFNLE1BQU0sSUFBSSx3QkFBd0I7QUFBQSxRQUN6QztBQUNBLGNBQU0sVUFBVSxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssWUFBWTtBQUd0RCxjQUFNLFlBQVksWUFBWSxLQUFLLE1BQU0sSUFBSSxFQUFFLFlBQVksU0FBUztBQUNwRSxjQUFNLFFBQU8scUJBQVUsTUFBTSxnQ0FBZ0MsTUFBaEQsbUJBQW1ELFdBQW5ELG1CQUEyRDtBQUd4RSxtQkFBVyxDQUFDLE9BQU8sTUFBTSxNQUFNLFFBQVEsS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLEVBQUU7QUFBQSxNQUNoRSxTQUFTLE9BQVA7QUFFRCxZQUFJO0FBQ0osWUFBSSxpQkFBaUIsT0FBTztBQUMzQixvQkFBVSxNQUFNO0FBQUEsUUFDakIsT0FBTztBQUNOLG9CQUFVLE9BQU8sS0FBSztBQUFBLFFBQ3ZCO0FBQ0EsbUJBQVcsY0FBYztBQUN6Qix1QkFBZTtBQUFBLE1BQ2hCO0FBR0EsWUFBTSxPQUFPLEtBQUssSUFBSSxVQUFVLG9CQUFvQixvQkFBSTtBQUN4RCxVQUFJLFFBQVEsTUFBTTtBQUNqQixXQUFHLFdBQVcsRUFBQyxNQUFNLGtEQUFpRCxDQUFDO0FBQUEsTUFDeEUsT0FBTztBQUNOLGNBQU0saUNBQWlCLGVBQWUsVUFBVSxJQUFJLGNBQWMsSUFBSTtBQUFBLE1BQ3ZFO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUU7QUFDZDsiLAogICJuYW1lcyI6IFtdCn0K
